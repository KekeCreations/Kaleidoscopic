plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation "curse.maven:jinxedlib-1203401:6332453"
    include implementation("blue.endless:jankson:${jankson_version}")

    modImplementation "curse.maven:artsandcrafts-1034791:6423022"
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
        datagen {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated/")}"
            vmArg "-Dfabric-api.datagen.modid=kaleidoscopic"

            runDir "build/datagen"
        }
    }
}

sourceSets.main.resources { srcDir project(":common").file('src/main/generated/').getAbsolutePath() }